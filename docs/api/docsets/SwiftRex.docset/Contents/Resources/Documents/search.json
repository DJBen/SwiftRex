{"Closure type-aliases.html#/s:8SwiftRex15EventEvaluationa":{"name":"EventEvaluation","abstract":"<p>Evaluation of an incoming Event, returning an sequence of Actions. <br/>"},"Closure type-aliases.html#/s:8SwiftRex8GetStatea":{"name":"GetState","abstract":"<p>Zero-argument function that returns the current state. <br/>"},"Closure type-aliases.html#/s:8SwiftRex17NextActionHandlera":{"name":"NextActionHandler","abstract":"<p>A function that calls the next action handler in the chain. <br/>"},"Closure type-aliases.html#/s:8SwiftRex16NextEventHandlera":{"name":"NextEventHandler","abstract":"<p>A function that calls the next event handler in the chain. <br/>"},"Closure type-aliases.html#/s:8SwiftRex14ReduceFunctiona":{"name":"ReduceFunction","abstract":"<p>State reducer: takes current state and an action, computes the new state. <br/>"},"Protocols/Monoid.html#/s:8SwiftRex6MonoidP5emptyxvpZ":{"name":"empty","abstract":"<p>Neutral monoidal container. Composing any monoid with an empty monoid should result in a function unchanged, regardless if the empty element is on the left-hand side or the right-hand side.</p>","parent_name":"Monoid"},"Protocols/Monoid.html#/s:8SwiftRex6MonoidP2lgoixx_xtFZ":{"name":"<>(_:_:)","abstract":"<p>Monoid Append operation</p>","parent_name":"Monoid"},"Protocols/Monoid.html":{"name":"Monoid","abstract":"<p>Protocol for a monoid container, allowing monoidal composition</p>"},"Classes/AnySideEffectProducer.html#/s:8SwiftRex21AnySideEffectProducerCACyxGqd__c9StateTypeQyd__RszAA0deF0Rd__lufc":{"name":"init(_:)","abstract":"<p>Default initializer for <code>AnySideEffectProducer</code></p>","parent_name":"AnySideEffectProducer"},"Classes/AnySideEffectProducer.html#/s:8SwiftRex21AnySideEffectProducerC7execute02RxA010ObservableCyAA14ActionProtocol_pGxyc8getState_tF":{"name":"execute(getState:)","abstract":"<p>Proxy method for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SideEffectProducer.html#/s:8SwiftRex18SideEffectProducerP7execute02RxA010ObservableCyAA14ActionProtocol_pG9StateTypeQzyc03getK0_tF\">SideEffectProducer.execute(getState:)</a></code></p>","parent_name":"AnySideEffectProducer"},"Structs/SideEffectError.html#/s:8SwiftRex15SideEffectErrorV4date10Foundation4DateVvp":{"name":"date","abstract":"<p>Date and time when the error happened</p>","parent_name":"SideEffectError"},"Structs/SideEffectError.html#/s:8SwiftRex15SideEffectErrorV13originalEventAA0G8Protocol_pvp":{"name":"originalEvent","abstract":"<p>The original event that was being handled by the middleware when the error was thrown</p>","parent_name":"SideEffectError"},"Structs/SideEffectError.html#/s:8SwiftRex15SideEffectErrorV5errors0E0_pvp":{"name":"error","abstract":"<p>The error thrown by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SideEffectProducer.html\">SideEffectProducer</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SideEffectMiddleware.html\">SideEffectMiddleware</a></code></p>","parent_name":"SideEffectError"},"Protocols/SideEffectProducer.html#/s:8SwiftRex18SideEffectProducerP9StateType":{"name":"StateType","abstract":"<p>State type that is handled by our <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SideEffectMiddleware.html\">SideEffectMiddleware</a></code></p>","parent_name":"SideEffectProducer"},"Protocols/SideEffectProducer.html#/s:8SwiftRex18SideEffectProducerP7execute02RxA010ObservableCyAA14ActionProtocol_pG9StateTypeQzyc03getK0_tF":{"name":"execute(getState:)","abstract":"<p>Method called when the middleware receives an event that is known by this <code>SideEffectProducer</code>, the place for starting the side-effects and returning a sequece of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> triggered by all stages of it.</p>","parent_name":"SideEffectProducer"},"Protocols/SideEffectMiddleware.html#/s:8SwiftRex20SideEffectMiddlewareP21allowEventToPropagateSbvp":{"name":"allowEventToPropagate","abstract":"<p>Allows the following middlewares in the chain to have a chance of handling the same events already handled</p>","parent_name":"SideEffectMiddleware"},"Protocols/SideEffectMiddleware.html#/s:8SwiftRex20SideEffectMiddlewareP10disposeBag02RxA007DisposeG0Cvp":{"name":"disposeBag","abstract":"<p>A dispose bag that owns the lifetime of each <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SideEffectProducer.html\">SideEffectProducer</a></code> observation, usually this <code>DisposeBag</code> will be a stored property in the <code>SideEffectMiddleware</code> instance</p>","parent_name":"SideEffectMiddleware"},"Protocols/SideEffectMiddleware.html#/s:8SwiftRex20SideEffectMiddlewareP04sideD0AA03AnycD8ProducerCy9StateTypeQzGSgAA13EventProtocol_p3for_tF":{"name":"sideEffect(for:)","abstract":"<p>Maps the incoming event to the proper <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SideEffectProducer.html\">SideEffectProducer</a></code>, wrapped in a type-eraser <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AnySideEffectProducer.html\">AnySideEffectProducer</a></code></p>","parent_name":"SideEffectMiddleware"},"Protocols/SideEffectMiddleware.html#/s:8SwiftRex20SideEffectMiddlewarePAAE6handleyAA13EventProtocol_p5event_9StateTypeQzyc03getJ0yAaE_p_AHyctc4nexttF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events and may trigger side-effects, may trigger actions, may start an asynchronous operation.</p>","parent_name":"SideEffectMiddleware"},"Protocols/SideEffectMiddleware.html#/s:8SwiftRex20SideEffectMiddlewarePAAE6handleyAA14ActionProtocol_p6action_9StateTypeQzyc03getJ0yAaE_p_AHyctc4nexttF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions and may change them or trigger additional ones. Usually this is not the best place to start side-effects or trigger new actions, it should be more as an observation point for tracking, logging and telemetry.</p>","parent_name":"SideEffectMiddleware"},"Protocols/SideEffectMiddleware.html":{"name":"SideEffectMiddleware","abstract":"<p>Defines a protocol for implementing a middleware that executes <code>RxSwift</code> side-effects. Instead of implementing the regular <code>handle(event:getState:next:)</code> and <code>handle(action:getState:next:)</code> methods, this protocol only requires a mapping from <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> to <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SideEffectProducer.html\">SideEffectProducer</a></code>.</p>"},"Protocols/SideEffectProducer.html":{"name":"SideEffectProducer","abstract":"<p>üåç <code>SideEffectProducer</code> defines a protocol for implementing a <code>RxSwift</code> side-effect producer, that will warms up a cold observation once it&rsquo;s executed. If your producer needs the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> that started the side-effect, you can pass it in the <code>SideEffectProducer</code> initializer and save it in a property. Please keep in mind that for every event, a new instance of a <code>SideEffectProducer</code> will be created, which means that every execution is completely isolated from each other and if you need to access a shared resource or cancel previous operations you must be careful implementing such things.</p>"},"Structs/SideEffectError.html":{"name":"SideEffectError","abstract":"<p>When the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SideEffectMiddleware.html\">SideEffectMiddleware</a></code> starts a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SideEffectProducer.html\">SideEffectProducer</a></code> which throws an error, the middleware will wrap the error in a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> of type <code>SideEffectError</code>, which contains details about the error, the date and time when it happened and the original event that was being handled by the middleware.</p>"},"Classes/AnySideEffectProducer.html":{"name":"AnySideEffectProducer","abstract":"<p>Type-erased <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SideEffectProducer.html\">SideEffectProducer</a></code></p>"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareCACyxGqd__c9StateTypeQyd__RszAA0D0Rd__lufc":{"name":"init(_:)","abstract":"<p>Default initializer for <code>AnyMiddleware</code></p>","parent_name":"AnyMiddleware"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareC6handleyAA13EventProtocol_p5event_xyc8getStateyAaE_p_xyctc4nexttF":{"name":"handle(event:getState:next:)","abstract":"<p>Proxy method for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handleyAA13EventProtocol_p5event_9StateTypeQzyc03getH0yAaE_p_AHyctc4nexttF\">Middleware.handle(event:getState:next:)</a></code></p>","parent_name":"AnyMiddleware"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareC6handleyAA14ActionProtocol_p6action_xyc8getStateyAaE_p_xyctc4nexttF":{"name":"handle(action:getState:next:)","abstract":"<p>Proxy method for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handleyAA14ActionProtocol_p6action_9StateTypeQzyc03getH0yAaE_p_AHyctc4nexttF\">Middleware.handle(action:getState:next:)</a></code></p>","parent_name":"AnyMiddleware"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareC13actionHandlerAA06ActionF0_pSgvp":{"name":"actionHandler","abstract":"<p>Proxy property for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html#/s:8SwiftRex10MiddlewareP13actionHandlerAA06ActionE0_pSgvp\">Middleware.actionHandler</a></code></p>","parent_name":"AnyMiddleware"},"Classes/SubstateMiddleware.html#/s:8SwiftRex18SubstateMiddlewareC13actionHandlerAA06ActionF0_pSgXwvp":{"name":"actionHandler","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> is capable of triggering <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code>. This property is a nullable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ActionHandler.html\">ActionHandler</a></code> used for the middleware to trigger the actions. It&rsquo;s gonna be injected by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code> or by a parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code>, so don&rsquo;t worry about it, just use it whenever you need to trigger something.</p>","parent_name":"SubstateMiddleware"},"Classes/SubstateMiddleware.html#/s:8SwiftRex18SubstateMiddlewareC6handleyAA13EventProtocol_p5event_xyc8getStateyAaE_p_xyctc4nexttF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events and may trigger side-effects, may trigger actions, may start an asynchronous operation.</p>","parent_name":"SubstateMiddleware"},"Classes/SubstateMiddleware.html#/s:8SwiftRex18SubstateMiddlewareC6handleyAA14ActionProtocol_p6action_xyc8getStateyAaE_p_xyctc4nexttF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions and may change them or trigger additional ones. Usually this is not the best place to start side-effects or trigger new actions, it should be more as an observation point for tracking, logging and telemetry.</p>","parent_name":"SubstateMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareCACyxGycfc":{"name":"init()","abstract":"<p>Default initializer for <code>ComposedMiddleware</code>, use this only if you don&rsquo;t like custom operators, otherwise create a <code>ComposedMiddleware</code> by composing two or more middlewares using the diamond operator, as shown below:</p>","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC13actionHandlerAA06ActionF0_pSgXwvp":{"name":"actionHandler","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> is capable of triggering <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code>. This property is a nullable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ActionHandler.html\">ActionHandler</a></code> used for the middleware to trigger the actions. It&rsquo;s gonna be injected by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code> or by a parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code>, so don&rsquo;t worry about it, just use it whenever you need to trigger something.</p>","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC6appendyqd__10middleware_t9StateTypeQyd__RszAA0D0Rd__lF":{"name":"append(middleware:)","abstract":"<p>Appends a new middleware to end of the composition (inner chain). Use this only if you don&rsquo;t like custom operators, otherwise create a <code>ComposedMiddleware</code> append more middlewares to the composition by using the diamond operator, as shown below:</p>","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC6handleyAA13EventProtocol_p5event_xyc8getStateyAaE_p_xyctc4nexttF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events. The <code>ComposedMiddleware</code> will call <code>handle(event:getState:next:)</code> for all its internal middlewares, in the order as they were composed and when all of them are done, the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> will be forwarded to the next middleware in the chain.</p>","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC6handleyAA14ActionProtocol_p6action_xyc8getStateyAaE_p_xyctc4nexttF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions. The <code>ComposedMiddleware</code> will call <code>handle(action:getState:next:)</code> for all its internal middlewares, in the order as they were composed and when all of them are done, the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> will be forwarded to the next middleware in the chain.</p>","parent_name":"ComposedMiddleware"},"Classes/DirectLineMiddleware.html#/s:8SwiftRex20DirectLineMiddlewareC13actionHandlerAA06ActionG0_pSgXwvp":{"name":"actionHandler","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> is capable of triggering <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code>. This property is a nullable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ActionHandler.html\">ActionHandler</a></code> used for the middleware to trigger the actions. It&rsquo;s gonna be injected by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code> or by a parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code>, so don&rsquo;t worry about it, just use it whenever you need to trigger something.</p>","parent_name":"DirectLineMiddleware"},"Classes/DirectLineMiddleware.html#/s:8SwiftRex20DirectLineMiddlewareCACyxGycfc":{"name":"init()","abstract":"<p>Default initializer for <code>DirectLineMiddleware</code></p>","parent_name":"DirectLineMiddleware"},"Classes/DirectLineMiddleware.html#/s:8SwiftRex20DirectLineMiddlewareC6handleyAA13EventProtocol_p5event_xyc8getStateyAaE_p_xyctc4nexttF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events. The <code>DirectLineMiddleware</code> is a useful tool when you have a very simple <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> that is also an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> and no decision has to be made other than forwarding the event as it is to the action queue.</p>","parent_name":"DirectLineMiddleware"},"Classes/DirectLineMiddleware.html#/s:8SwiftRex20DirectLineMiddlewareC6handleyAA14ActionProtocol_p6action_xyc8getStateyAaE_p_xyctc4nexttF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions. The <code>DirectLineMiddleware</code> won&rsquo;t do anything with the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code>, simply forwards it to the next middleware in the chain.</p>","parent_name":"DirectLineMiddleware"},"Classes/BypassMiddleware.html#/s:8SwiftRex16BypassMiddlewareC13actionHandlerAA06ActionF0_pSgXwvp":{"name":"actionHandler","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> is capable of triggering <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code>. This property is a nullable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ActionHandler.html\">ActionHandler</a></code> used for the middleware to trigger the actions. It&rsquo;s gonna be injected by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code> or by a parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code>, so don&rsquo;t worry about it, just use it whenever you need to trigger something.</p>","parent_name":"BypassMiddleware"},"Classes/BypassMiddleware.html#/s:8SwiftRex16BypassMiddlewareCACyxGycfc":{"name":"init()","abstract":"<p>Default initializer for <code>BypassMiddleware</code></p>","parent_name":"BypassMiddleware"},"Classes/BypassMiddleware.html#/s:8SwiftRex16BypassMiddlewareC6handleyAA13EventProtocol_p5event_xyc8getStateyAaE_p_xyctc4nexttF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events. The <code>BypassMiddleware</code> won&rsquo;t do anything with the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code>, simply forwards it to the next middleware in the chain.</p>","parent_name":"BypassMiddleware"},"Classes/BypassMiddleware.html#/s:8SwiftRex16BypassMiddlewareC6handleyAA14ActionProtocol_p6action_xyc8getStateyAaE_p_xyctc4nexttF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions. The <code>BypassMiddleware</code> won&rsquo;t do anything with the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code>, simply forwards it to the next middleware in the chain.</p>","parent_name":"BypassMiddleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP9StateType":{"name":"StateType","abstract":"<p>The State that this <code>Middleware</code> knowns how to handle. Thanks to lenses, this state can be a sub-state lifted to a global state. Please check <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4liftAA08SubstateC0Cyqd__xGs15WritableKeyPathCyqd__9StateTypeQzGlF\">lift(_:)</a></code> for more details.</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP13actionHandlerAA06ActionE0_pSgvp":{"name":"actionHandler","abstract":"<p>A <code>Middleware</code> is capable of triggering <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code>. This property is a nullable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ActionHandler.html\">ActionHandler</a></code> used for the middleware to trigger the actions. It&rsquo;s gonna be injected by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code> or by a parent <code>Middleware</code>, so don&rsquo;t worry about it, just use it whenever you need to trigger something.</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handleyAA13EventProtocol_p5event_9StateTypeQzyc03getH0yAaE_p_AHyctc4nexttF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events and may trigger side-effects, may trigger actions, may start an asynchronous operation.</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handleyAA14ActionProtocol_p6action_9StateTypeQzyc03getH0yAaE_p_AHyctc4nexttF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions and may change them or trigger additional ones. Usually this is not the best place to start side-effects or trigger new actions, it should be more as an observation point for tracking, logging and telemetry.</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4liftAA08SubstateC0Cyqd__xGs15WritableKeyPathCyqd__9StateTypeQzGlF":{"name":"lift(_:)","abstract":"<p>A lenses method. The global state of your app is <em>Whole</em>, and the <code>Middleware</code> handles <em>Part</em>, that is a sub-state.","parent_name":"Middleware"},"Protocols/Middleware.html":{"name":"Middleware","abstract":"<p>‚õì <code>Middleware</code> is a plugin, or a composition of several plugins, that are assigned to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code> pipeline in order to handle each <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> dispatched and to create <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> in response. It&rsquo;s also capable of handling each <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> before the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Reducer.html\">Reducer</a></code> to do its job.</p>"},"Classes/BypassMiddleware.html":{"name":"BypassMiddleware","abstract":"<p>The <code>BypassMiddleware</code> won&rsquo;t do any operation to either, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code>, it will simply forward them to the next middleware in the chain. It can be useful for Unit Tests or for some compositions.</p>"},"Classes/DirectLineMiddleware.html":{"name":"DirectLineMiddleware","abstract":"<p>The <code>DirectLineMiddleware</code> is a useful tool when you have a very simple <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> that is also an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> and no decision has to be made other than forwarding the event as it is to the action queue.</p>"},"Classes/ComposedMiddleware.html":{"name":"ComposedMiddleware","abstract":"<p>The <code>ComposedMiddleware</code> is a container of inner middlewares that are chained together in the order as they were composed. Whenever an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> or an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> arrives to be handled by this <code>ComposedMiddleware</code>, it will delegate to its internal chain of middlewares.</p>"},"Middleware (basics).html#/s:8SwiftRex2lgoiAA18ComposedMiddlewareCy9StateTypeQzGx_q_tAA0E0RzAaHR_AEQy_AFRSr0_lF":{"name":"<>(_:_:)","abstract":"<p>Initializes a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ComposedMiddleware.html\">ComposedMiddleware</a></code> from the <code>lhs</code> and <code>rhs</code> middlewares parameters, or appends to the <code>lhs</code> if it is already a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ComposedMiddleware.html\">ComposedMiddleware</a></code>, as shown below:</p>"},"Classes/SubstateMiddleware.html":{"name":"SubstateMiddleware","abstract":"<p>This is a container that lifts a sub-state middleware to a global state middleware.</p>"},"Classes/AnyMiddleware.html":{"name":"AnyMiddleware","abstract":"<p>Type-erased <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code></p>"},"Structs/Reducer.html#/s:8SwiftRex7ReducerVACyxGxx_AA14ActionProtocol_ptccfc":{"name":"init(_:)","abstract":"<p>Reducer initializer takes only the underlying function <code>(S, A) -&gt; S</code> that is the reducer function itself.</p>","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV5emptyACyxGvpZ":{"name":"empty","abstract":"<p>Neutral monoidal container. Composing any monoid with an empty monoid should result in a function unchanged, regardless if the empty element is on the left-hand side or the right-hand side.</p>","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV2lgoiACyxGAE_AEtFZ":{"name":"<>(_:_:)","abstract":"<p>Monoid Append operation</p>","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV4liftACyqd__Gs15WritableKeyPathCyqd__xGlF":{"name":"lift(_:)","abstract":"<p>A lenses method. The global state of your app is <em>Whole</em>, and the <code>Reducer</code> handles <em>Part</em>, that is a sub-state.","parent_name":"Reducer"},"Structs/Reducer.html":{"name":"Reducer","abstract":"<p>‚öô <code>Reducer</code> is a pure function wrapped in a monoid container, that takes current state and an action to calculate the new state.</p>"},"Reducer.html#/s:8SwiftRex14ActionProtocolP":{"name":"ActionProtocol","abstract":"<p>üèÑ‚Äç <code>ActionProtocol</code> represents an action, usually created by a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> in response to an event.</p>"},"Protocols/ActionHandler.html#/s:8SwiftRex13ActionHandlerP7triggeryAA0C8Protocol_pF":{"name":"trigger(_:)","abstract":"<p>A way for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> to trigger their actions, usually in response to events or async operations.</p>","parent_name":"ActionHandler"},"Classes/StoreBase.html#/s:8SwiftRex9StoreBaseCACyxGx12initialState_AA7ReducerVyxG7reducerqd__10middlewaretc0F4TypeQyd__RszAA10MiddlewareRd__lufc":{"name":"init(initialState:reducer:middleware:)","abstract":"<p>Required initializer that takes all the expected pipelines</p>","parent_name":"StoreBase"},"Classes/StoreBase.html#/s:8SwiftRex9StoreBaseCACyxGx12initialState_AA7ReducerVyxG7reducertcfc":{"name":"init(initialState:reducer:)","abstract":"<p>Convenience initializer that takes all the expected pipelines expect the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code>, that points to the neutral case of a middleware, the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/BypassMiddleware.html\">BypassMiddleware</a></code> class.</p>","parent_name":"StoreBase"},"Classes/StoreBase.html#/s:8SwiftRex9StoreBaseC8dispatchyAA13EventProtocol_pF":{"name":"dispatch(_:)","abstract":"<p>Because <code>StoreBase</code> is an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/EventHandler.html\">EventHandler</a></code>, it provides a way for an <code>UIViewController</code> or other classes in the boundaries of the device sensors to communicate and dispatch their events.</p>","parent_name":"StoreBase"},"Classes/StoreBase.html#/s:8SwiftRex9StoreBaseC7triggeryAA14ActionProtocol_pF":{"name":"trigger(_:)","abstract":"<p>Because <code>StoreBase</code> is an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ActionHandler.html\">ActionHandler</a></code>, it provides a way for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> to trigger their actions, usually in response to events or async operations.</p>","parent_name":"StoreBase"},"Classes/StoreBase.html#/s:8SwiftRex9StoreBaseC9subscribe02RxA010Disposable_pqd__1EQyd__RszAE12ObserverTypeRd__lF":{"name":"subscribe(_:)","abstract":"<p>Because <code>StoreBase</code> is a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/StateProvider.html\">StateProvider</a></code>, it exposes a way for an <code>UIViewController</code> or other interested classes to subscribe to <code>State</code> changes.</p>","parent_name":"StoreBase"},"Classes/StoreBase.html":{"name":"StoreBase","abstract":"<p>üè™ <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code> defines a protocol for the state store of an app. It must have an input and an output:</p>"},"Protocols/ActionHandler.html":{"name":"ActionHandler","abstract":"<p><code>ActionHandler</code> defines a protocol for something able to receive and distribute actions. A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code> doesn&rsquo;t need to be <code>ActionHandler</code>, because this would expose the inner working of it. The <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/StoreBase.html\">StoreBase</a></code>, on the other hand, is a default implementation of a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code> that happens to use middlewares and <code>ActionHandler</code>.</p>"},"Protocols/StateProvider.html#/s:8SwiftRex13StateProviderP0C4Typea":{"name":"StateType","abstract":"<p>The elements in the ObservableType sequence, which is expected to be the <code>StateType</code> (the app global state)</p>","parent_name":"StateProvider"},"Protocols/EventHandler.html#/s:8SwiftRex12EventHandlerP8dispatchyAA0C8Protocol_pF":{"name":"dispatch(_:)","abstract":"<p>A way for an <code>UIViewController</code> or other classes in the boundaries of the device sensors to communicate and dispatch their events.</p>","parent_name":"EventHandler"},"Store (contracts).html#/s:8SwiftRex5StoreP":{"name":"Store","abstract":"<p>üè™ <code>Store</code> defines a protocol for the state store of an app. It must have an input and an output:</p>"},"Store (contracts).html#/s:8SwiftRex13EventProtocolP":{"name":"EventProtocol","abstract":"<p>üïπ <code>EventProtocol</code> represents an event, usually created in response to an user&rsquo;s input, such as tap, swipe, pinch, scroll.</p>"},"Protocols/EventHandler.html":{"name":"EventHandler","abstract":"<p><code>EventHandler</code> defines a protocol for something able to receive and distribute events. Usually a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code>.</p>"},"Protocols/StateProvider.html":{"name":"StateProvider","abstract":"<p><code>StateProvider</code> defines a protocol for an <code>ObservableType</code> of <code>StateType</code>, so everybody can observe the global state changes through this container. Usually a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex5StoreP\">Store</a></code>.</p>"},"Store (contracts).html":{"name":"Store (contracts)"},"Store (basic implementation).html":{"name":"Store (basic implementation)"},"Reducer.html":{"name":"Reducer"},"Middleware (basics).html":{"name":"Middleware (basics)"},"Side-Effects.html":{"name":"Side-Effects"},"Composition helpers.html":{"name":"Composition helpers"},"Closure type-aliases.html":{"name":"Closure type-aliases"}}