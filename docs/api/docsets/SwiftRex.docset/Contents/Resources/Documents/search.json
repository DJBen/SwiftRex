{"Other%20Typealiases.html#/s:8SwiftRex24UnfailableSubscriberTypea":{"name":"UnfailableSubscriberType"},"Other%20Typealiases.html#/s:8SwiftRex23UnfailablePublisherTypea":{"name":"UnfailablePublisherType"},"Other%20Typealiases.html#/s:8SwiftRex17UnfailableSubjecta":{"name":"UnfailableSubject"},"Other%20Typealiases.html#/s:8SwiftRex31UnfailableReplayLastSubjectTypea":{"name":"UnfailableReplayLastSubjectType"},"Other%20Typealiases.html#/s:8SwiftRex4Nexta":{"name":"Next"},"Structs/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueV06shouldD08previous3newSbx_xtF":{"name":"shouldEmit(previous:new:)","parent_name":"ShouldEmitValue"},"Structs/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueV12shouldRemove8previous3newSbx_xtF":{"name":"shouldRemove(previous:new:)","parent_name":"ShouldEmitValue"},"Structs/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueV6alwaysACyxGvpZ":{"name":"always","parent_name":"ShouldEmitValue"},"Structs/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueV5neverACyxGvpZ":{"name":"never","parent_name":"ShouldEmitValue"},"Structs/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueV4whenyACyxGSbx_xtccvpZ":{"name":"when","parent_name":"ShouldEmitValue"},"Structs/ShouldEmitValue.html#/s:8SwiftRex15ShouldEmitValueVAASQRzlE13whenDifferentACyxGvpZ":{"name":"whenDifferent","parent_name":"ShouldEmitValue"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV9publisherAA09PublisherF0Vyxq_Gvp":{"name":"publisher","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV10subscriberAA010SubscriberF0Vyxq_Gvp":{"name":"subscriber","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV5valuexycvp":{"name":"value","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV9publisher10subscriber5valueACyxq_GAA09PublisherF0Vyxq_G_AA010SubscriberF0Vyxq_Gxyctcfc":{"name":"init(publisher:subscriber:value:)","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV6mutateyqd__qd__xzXElF":{"name":"mutate(_:)","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV6mutate4when6actionqd__Sbqd__c_qd__xzXEtlF":{"name":"mutate(when:action:)","parent_name":"ReplayLastSubjectType"},"Structs/SubjectType.html#/s:8SwiftRex11SubjectTypeV9publisherAA09PublisherD0Vyxq_Gvp":{"name":"publisher","parent_name":"SubjectType"},"Structs/SubjectType.html#/s:8SwiftRex11SubjectTypeV10subscriberAA010SubscriberD0Vyxq_Gvp":{"name":"subscriber","parent_name":"SubjectType"},"Structs/SubjectType.html#/s:8SwiftRex11SubjectTypeV9publisher10subscriberACyxq_GAA09PublisherD0Vyxq_G_AA010SubscriberD0Vyxq_Gtcfc":{"name":"init(publisher:subscriber:)","parent_name":"SubjectType"},"Structs/PublisherType.html#/s:8SwiftRex13PublisherTypeV9subscribeyAA012SubscriptionD0_pAA010SubscriberD0Vyxq_Gcvp":{"name":"subscribe","parent_name":"PublisherType"},"Structs/PublisherType.html#/s:8SwiftRex13PublisherTypeV9subscribeACyxq_GAA012SubscriptionD0_pAA010SubscriberD0Vyxq_Gc_tcfc":{"name":"init(subscribe:)","parent_name":"PublisherType"},"Structs/PublisherType.html#/s:8SwiftRex13PublisherTypeV15assertNoFailureACyxs5NeverOGyF":{"name":"assertNoFailure()","parent_name":"PublisherType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV7onValueyyxcvp":{"name":"onValue","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV11onCompletedyyq_Sgcvp":{"name":"onCompleted","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV11onSubscribeyyAA012SubscriptionD0_pcvp":{"name":"onSubscribe","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV7onValue0E9Completed0E9SubscribeACyxq_GyxcSg_yq_SgcSgyAA012SubscriptionD0_pcSgtcfc":{"name":"init(onValue:onCompleted:onSubscribe:)","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV15assertNoFailureACyxs5NeverOGyF":{"name":"assertNoFailure()","parent_name":"SubscriberType"},"Structs/StoreProjection.html#/s:8SwiftRex13StateProviderP14statePublisherAA0F4TypeVy0cG0Qzs5NeverOGvp":{"name":"statePublisher","parent_name":"StoreProjection"},"Structs/StoreProjection.html#/s:8SwiftRex15StoreProjectionV6action5stateACyxq_Gyxc_AA13PublisherTypeVyq_s5NeverOGtcfc":{"name":"init(action:state:)","parent_name":"StoreProjection"},"Structs/StoreProjection.html#/s:8SwiftRex13ActionHandlerP8dispatchyy0C4TypeQzF":{"name":"dispatch(_:)","parent_name":"StoreProjection"},"Structs/ReduxPipelineWrapper.html#/s:8SwiftRex20ReduxPipelineWrapperV10ActionTypea":{"name":"ActionType","parent_name":"ReduxPipelineWrapper"},"Structs/ReduxPipelineWrapper.html#/s:8SwiftRex20ReduxPipelineWrapperV9StateTypea":{"name":"StateType","parent_name":"ReduxPipelineWrapper"},"Structs/ReduxPipelineWrapper.html#/s:8SwiftRex20ReduxPipelineWrapperV5state7reducer10middleware10emitsValueACyxGAA21ReplayLastSubjectTypeVy05StateN0Qzs5NeverOG_AA7ReducerVy011InputActionN0QzALGxAA010ShouldEmitJ0VyALGtcfc":{"name":"init(state:reducer:middleware:emitsValue:)","parent_name":"ReduxPipelineWrapper"},"Structs/ReduxPipelineWrapper.html#/s:8SwiftRex13ActionHandlerP8dispatchyy0C4TypeQzF":{"name":"dispatch(_:)","parent_name":"ReduxPipelineWrapper"},"Structs/ReduxPipelineWrapper.html#/s:8SwiftRex20ReduxPipelineWrapperVAASQ9StateTypeRpzrlE5state7reducer10middlewareACyxGAA017ReplayLastSubjectG0VyAEs5NeverOG_AA7ReducerVy011InputActionG0QzAEGxtcfc":{"name":"init(state:reducer:middleware:)","parent_name":"ReduxPipelineWrapper"},"Structs/MiddlewareContext.html#/s:8SwiftRex17MiddlewareContextV8getStateq_ycvp":{"name":"getState","abstract":"<p>A way for Middlewares to fetch the latest state at any point in time.</p>","parent_name":"MiddlewareContext"},"Structs/MiddlewareContext.html#/s:8SwiftRex17MiddlewareContextV8onAction8getStateACyxq_Gyxc_q_yctcfc":{"name":"init(onAction:getState:)","abstract":"<p>This initializer will be used by the store in order to inject context into every middleware in the chain. So you","parent_name":"MiddlewareContext"},"Structs/MiddlewareContext.html#/s:8SwiftRex17MiddlewareContextV8dispatchyyxF":{"name":"dispatch(_:)","abstract":"<p>A way for Middlewares to trigger new actions.</p>","parent_name":"MiddlewareContext"},"Structs/MiddlewareContext.html#/s:8SwiftRex17MiddlewareContextV6unlift13actionZoomOut05stateG2InACyqd__qd_0_Gxqd__c_qd_0_q_ctr0_lF":{"name":"unlift(actionZoomOut:stateZoomIn:)","parent_name":"MiddlewareContext"},"Structs/MiddlewareContext.html":{"name":"MiddlewareContext","abstract":"<p><code>MiddlewareContext</code> is a data structure that provides indirect access to the store, by offering middlewares two important"},"Structs/ReduxPipelineWrapper.html":{"name":"ReduxPipelineWrapper"},"Structs/StoreProjection.html":{"name":"StoreProjection","abstract":"<p>Not necessarily a store implementation means that this entity holds the source-of-truth of an app. The source-of-truth"},"Structs/SubscriberType.html":{"name":"SubscriberType"},"Structs/PublisherType.html":{"name":"PublisherType"},"Structs/SubjectType.html":{"name":"SubjectType"},"Structs/ReplayLastSubjectType.html":{"name":"ReplayLastSubjectType"},"Structs/ShouldEmitValue.html":{"name":"ShouldEmitValue"},"Protocols/SubscriptionCollection.html#/s:8SwiftRex22SubscriptionCollectionP5store12subscriptionyAA0C4Type_p_tF":{"name":"store(subscription:)","parent_name":"SubscriptionCollection"},"Protocols/SubscriptionType.html#/s:8SwiftRex16SubscriptionTypeP11unsubscribeyyF":{"name":"unsubscribe()","parent_name":"SubscriptionType"},"Protocols/SubscriptionType.html#/s:8SwiftRex16SubscriptionTypePAAE9cancelled2byyqd__z_tAA0C10CollectionRd__lF":{"name":"cancelled(by:)","parent_name":"SubscriptionType"},"Protocols/SubscriptionType.html#/s:8SwiftRex16SubscriptionTypePAAE9cancelled2byyAA0C10Collection_pz_tF":{"name":"cancelled(by:)","parent_name":"SubscriptionType"},"Protocols/Semigroup.html#/s:8SwiftRex9SemigroupP2lgoiyxx_xtFZ":{"name":"<>(_:_:)","abstract":"<p>Semigroup combine operation</p>","parent_name":"Semigroup"},"Protocols/ReduxStoreProtocol.html#/s:8SwiftRex18ReduxStoreProtocolP14MiddlewareTypeQa":{"name":"MiddlewareType","parent_name":"ReduxStoreProtocol"},"Protocols/ReduxStoreProtocol.html#/s:8SwiftRex18ReduxStoreProtocolP8pipelineAA0C15PipelineWrapperVy14MiddlewareTypeQzGvp":{"name":"pipeline","parent_name":"ReduxStoreProtocol"},"Protocols/ReduxStoreProtocol.html#/s:8SwiftRex13ActionHandlerP8dispatchyy0C4TypeQzF":{"name":"dispatch(_:)","parent_name":"ReduxStoreProtocol"},"Protocols/StoreType.html#/s:8SwiftRex9StoreTypePAAE10projection6action5stateAA0C10ProjectionVyqd__qd_0_G06ActionD0QzSgqd__c_AA09PublisherD0Vyqd_0_s5NeverOGANy05StateD0QzAPGctr0_lF":{"name":"projection(action:state:)","parent_name":"StoreType"},"Protocols/StoreType.html":{"name":"StoreType","abstract":"<p>üè™ <code>StoreType</code> defines a protocol for a state store.</p>"},"Protocols/ReduxStoreProtocol.html":{"name":"ReduxStoreProtocol"},"Protocols/Semigroup.html":{"name":"Semigroup","abstract":"<p>Protocol for a semigroup, any algebraic structure that allows two of its elements to be combined into one,"},"Protocols/SubscriptionType.html":{"name":"SubscriptionType"},"Protocols/SubscriptionCollection.html":{"name":"SubscriptionCollection"},"Classes/PipelineMiddleware.html#/s:8SwiftRex10MiddlewareP7contextAA0C7ContextVy16OutputActionTypeQz05StateH0QzGycvp":{"name":"context","parent_name":"PipelineMiddleware"},"Classes/PipelineMiddleware.html#/s:8SwiftRex18PipelineMiddlewareC17actionTransformer0E7Subject22subscriptionCollectionACyxq_q0_GAA13PublisherTypeVyq_s5NeverOGAIyx_q0_tAKGcSg_AA0gK0Vyx_q0_tAKGyXEAA012SubscriptionI0_pyXEtcfc":{"name":"init(actionTransformer:actionSubject:subscriptionCollection:)","parent_name":"PipelineMiddleware"},"Classes/PipelineMiddleware.html#/s:8SwiftRex18PipelineMiddlewareC6handle6action4nextyx_yyctF":{"name":"handle(action:next:)","abstract":"<p>Handles the incoming actions. In the <code>PipelineMiddleware</code> this is already implemented for you, by calling the","parent_name":"PipelineMiddleware"},"Classes/LiftMiddleware.html#/s:8SwiftRex14LiftMiddlewareC7contextAA0D7ContextVyq_q0_Gycvp":{"name":"context","abstract":"<p>Every <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> needs some context in order to be able to interface with other middleware and with the store.","parent_name":"LiftMiddleware"},"Classes/LiftMiddleware.html#/s:8SwiftRex14LiftMiddlewareC6handle6action4nextyx_yyctF":{"name":"handle(action:next:)","abstract":"<p>Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch","parent_name":"LiftMiddleware"},"Classes/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareC7contextAA0D7ContextVyq_q0_Gycvp":{"name":"context","abstract":"<p>Every <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> needs some context in order to be able to interface with other middleware and with the store.","parent_name":"IdentityMiddleware"},"Classes/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareCACyxq_q0_Gycfc":{"name":"init()","abstract":"<p>Default initializer for <code>IdentityMiddleware</code></p>","parent_name":"IdentityMiddleware"},"Classes/IdentityMiddleware.html#/s:8SwiftRex18IdentityMiddlewareC6handle6action4nextyx_yyctF":{"name":"handle(action:next:)","abstract":"<p>Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch","parent_name":"IdentityMiddleware"},"Classes/ReduxStoreBase.html#/s:8SwiftRex14ReduxStoreBaseC8pipelineAA0C15PipelineWrapperVyAA13AnyMiddlewareCyxxq_GGvp":{"name":"pipeline","abstract":"<p>Pipeline to execute upon action arrival, containing all middlewares and reducers</p>","parent_name":"ReduxStoreBase"},"Classes/ReduxStoreBase.html#/s:8SwiftRex14ReduxStoreBaseC14statePublisherAA0G4TypeVyq_s5NeverOGvp":{"name":"statePublisher","abstract":"<p>State publisher which can be subscribed in order to be notified on every mutation</p>","parent_name":"ReduxStoreBase"},"Classes/ReduxStoreBase.html#/s:8SwiftRex14ReduxStoreBaseC7subject7reducer10middleware10emitsValueACyxq_GAA21ReplayLastSubjectTypeVyq_s5NeverOG_AA7ReducerVyxq_Gqd__AA010ShouldEmitJ0Vyq_Gtc011InputActionN0Qyd__Rsz05StateN0Qyd__Rs_AA10MiddlewareRd__06OutputtN0Qyd__AURSlufc":{"name":"init(subject:reducer:middleware:emitsValue:)","abstract":"<p>Required initializer that configures the action handler pipeline and the state storage</p>","parent_name":"ReduxStoreBase"},"Classes/ReduxStoreBase.html":{"name":"ReduxStoreBase","abstract":"<p>üè™ <code>ReduxStoreBase</code> is a base class that can be used to create the main store of an app, using the redux pattern.</p>"},"Classes/IdentityMiddleware.html":{"name":"IdentityMiddleware","abstract":"<p>The <code>IdentityMiddleware</code> won&rsquo;t do any operation, simply bypass actions through. It&rsquo;s meant to provide identity axiom"},"Classes/LiftMiddleware.html":{"name":"LiftMiddleware","abstract":"<p>This is a container that lifts a sub-state middleware to a global state middleware.</p>"},"Classes/PipelineMiddleware.html":{"name":"PipelineMiddleware"},"Closure%20type-aliases.html#/s:8SwiftRex8GetStatea":{"name":"GetState","abstract":"<p>Zero-argument function that returns the current state. <br/>"},"Closure%20type-aliases.html#/s:8SwiftRex14ReduceFunctiona":{"name":"ReduceFunction","abstract":"<p>State reducer: takes current state and an action, computes the new state. <br/>"},"Protocols/Monoid.html#/s:8SwiftRex6MonoidP8identityxvpZ":{"name":"identity","abstract":"<p>Neutral monoidal container. Composing any monoid with an identity monoid should result in a function unchanged, regardless if the empty element is on the left-hand side or the right-hand side.</p>","parent_name":"Monoid"},"Protocols/Monoid.html":{"name":"Monoid","abstract":"<p>Protocol for a monoid algebra, allowing monoidal composition. It&rsquo;s a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Semigroup.html\">Semigroup</a></code> with identity element, element which,"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareCyACyxq_q0_Gqd__c15InputActionTypeQyd__Rsz06OutputfG0Qyd__Rs_05StateG0Qyd__Rs0_AA0D0Rd__lufc":{"name":"init(_:)","abstract":"<p>Default initializer for <code>AnyMiddleware</code></p>","parent_name":"AnyMiddleware"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareC6handle6action4nextyx_yyctF":{"name":"handle(action:next:)","abstract":"<p>Proxy method for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handle6action4nexty15InputActionTypeQz_yyctF\">Middleware.handle(action:next:)</a></code></p>","parent_name":"AnyMiddleware"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareC7contextAA0D7ContextVyq_q0_Gycvp":{"name":"context","abstract":"<p>Proxy property for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html#/s:8SwiftRex10MiddlewareP7contextAA0C7ContextVy16OutputActionTypeQz05StateH0QzGycvp\">Middleware.context</a></code></p>","parent_name":"AnyMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareCACyxq_q0_Gycfc":{"name":"init()","abstract":"<p>Default initializer for <code>ComposedMiddleware</code>, use this only if you don&rsquo;t like custom operators, otherwise create a <code>ComposedMiddleware</code> by composing two or more middlewares using the diamond operator, as shown below:</p>","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC7contextAA0D7ContextVyq_q0_Gycvp":{"name":"context","abstract":"<p>Every <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> needs some context in order to be able to interface with other middleware and with the store.","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC6append10middlewareyqd___t15InputActionTypeQyd__Rsz06OutputhI0Qyd__Rs_05StateI0Qyd__Rs0_AA0D0Rd__lF":{"name":"append(middleware:)","abstract":"<p>Appends a new middleware to end of the composition (inner chain). Use this only if you don&rsquo;t like custom operators, otherwise create a <code>ComposedMiddleware</code> append more middlewares to the composition by using the diamond operator, as shown below:</p>","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC6handle6action4nextyx_yyctF":{"name":"handle(action:next:)","abstract":"<p>Handles the incoming actions. The <code>ComposedMiddleware</code> will forward each action to all its internal middlewares, in","parent_name":"ComposedMiddleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP15InputActionTypeQa":{"name":"InputActionType","abstract":"<p>The Action type that this <code>Middleware</code> knowns how to handle, so the store will forward actions of this type to this","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP16OutputActionTypeQa":{"name":"OutputActionType","abstract":"<p>The Action type that this <code>Middleware</code> will eventually trigger back to the store in response of side-effects. This","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP9StateTypeQa":{"name":"StateType","abstract":"<p>The State that this <code>Middleware</code> knowns how to handle. Thanks to lenses, this state can be a sub-state lifted to","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP7contextAA0C7ContextVy16OutputActionTypeQz05StateH0QzGycvp":{"name":"context","abstract":"<p>Every <code>Middleware</code> needs some context in order to be able to interface with other middleware and with the store.","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handle6action4nexty15InputActionTypeQz_yyctF":{"name":"handle(action:next:)","abstract":"<p>Handles the incoming actions and may or not start async tasks, check the latest state at any point or dispatch","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4lift12actionZoomIn0eF3Out05statefG0AA04LiftC0Cyqd__qd_0_qd_1_xG15InputActionTypeQzSgqd__c_qd_0_06OutputlM0Qzc05StateM0Qzqd_1_ctr1_lF":{"name":"lift(actionZoomIn:actionZoomOut:stateZoomIn:)","abstract":"<p>A lenses method. The global state of your app is <em>Whole</em>, and the <code>Middleware</code> handles <em>Part</em>, that is a sub-state.","parent_name":"Middleware"},"Protocols/Middleware.html":{"name":"Middleware","abstract":"<p>‚õì <code>Middleware</code> is a plugin, or a composition of several plugins, that are assigned to the <code>Store</code> pipeline in order"},"Classes/ComposedMiddleware.html":{"name":"ComposedMiddleware","abstract":"<p>The <code>ComposedMiddleware</code> is a container of inner middlewares that are chained together in the order as they were composed. Whenever an <code>EventProtocol</code> or an <code>ActionProtocol</code> arrives to be handled by this <code>ComposedMiddleware</code>, it will delegate to its internal chain of middlewares.</p>"},"Middleware%20%28basics%29.html#/s:8SwiftRex2lgoiyAA18ComposedMiddlewareCy15InputActionTypeQz06OutputgH0Qz05StateH0QzGx_q_tAA0E0RzAaLR_AEQy_AFRSAGQy_AHRSAIQy_AJRSr0_lF":{"name":"<>(_:_:)","abstract":"<p>Initializes a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ComposedMiddleware.html\">ComposedMiddleware</a></code> from the <code>lhs</code> and <code>rhs</code> middlewares parameters, or appends to the <code>lhs</code> if it is already a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ComposedMiddleware.html\">ComposedMiddleware</a></code>, as shown below:</p>"},"Classes/AnyMiddleware.html":{"name":"AnyMiddleware","abstract":"<p>Type-erased <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code></p>"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV6reduceyq_x_q_tcvp":{"name":"reduce","abstract":"<p>Execute the wrapped reduce function. You must provide the parameters <code>action: ActionType</code> (the action to be","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerVyACyxq_Gq_x_q_tccfc":{"name":"init(_:)","abstract":"<p>Reducer initializer takes only the underlying function <code>(ActionType, StateType) -&gt; StateType</code> that is the reducer","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV8identityACyxq_GvpZ":{"name":"identity","abstract":"<p>Neutral monoidal container. Composing any monoid with an <code>identity</code> monoid should result in a function unchanged,","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV2lgoiyACyxq_GAE_AEtFZ":{"name":"<>(_:_:)","abstract":"<p>Monoid Append operation. Allows to compose two reducers into one, keeping in mind that the order of the composition","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV4lift12actionGetter05stateF00G6SetterACyqd__qd_0_GxSgqd__c_q_qd_0_cyqd_0_z_q_tctr0_lF":{"name":"lift(actionGetter:stateGetter:stateSetter:)","abstract":"<p>A type-lifting method. The global state of your app is <em>Whole</em>, and the <code>Reducer</code> handles <em>Part</em>, that is a","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV4lift6action5stateACyqd__qd_0_Gs7KeyPathCyqd__xSgG_s08WritablegH0Cyqd_0_q_Gtr0_lF":{"name":"lift(action:state:)","abstract":"<p>A type-lifting method. The global state of your app is <em>Whole</em>, and the <code>Reducer</code> handles <em>Part</em>, that is a","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV4lift5stateACyxqd__Gs15WritableKeyPathCyqd__q_G_tlF":{"name":"lift(state:)","abstract":"<p>A type-lifting method. The global state of your app is <em>Whole</em>, and the <code>Reducer</code> handles <em>Part</em>, that is a","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV4lift6actionACyqd__q_Gs7KeyPathCyqd__xSgG_tlF":{"name":"lift(action:)","abstract":"<p>A type-lifting method. The global state of your app is <em>Whole</em>, and the <code>Reducer</code> handles <em>Part</em>, that is a","parent_name":"Reducer"},"Structs/Reducer.html":{"name":"Reducer","abstract":"<p>‚öô <code>Reducer</code> is a pure function wrapped in a monoid container, that takes an action and the current state to calculate"},"Protocols/ActionHandler.html#/s:8SwiftRex13ActionHandlerP0C4TypeQa":{"name":"ActionType","parent_name":"ActionHandler"},"Protocols/ActionHandler.html#/s:8SwiftRex13ActionHandlerP8dispatchyy0C4TypeQzF":{"name":"dispatch(_:)","abstract":"<p>The function that allows Views, ViewControllers, Presenters to dispatch actions to the store.","parent_name":"ActionHandler"},"Protocols/ActionHandler.html":{"name":"ActionHandler","abstract":"<p><code>ActionHandler</code> defines a protocol for entities able to handle actions - defined by the associated type <code>ActionType</code>.</p>"},"Protocols/StateProvider.html#/s:8SwiftRex13StateProviderP0C4TypeQa":{"name":"StateType","abstract":"<p>This can be a global state, or a view state that is a not a source-of-truth but only a struct calculated and","parent_name":"StateProvider"},"Protocols/StateProvider.html#/s:8SwiftRex13StateProviderP14statePublisherAA0F4TypeVy0cG0Qzs5NeverOGvp":{"name":"statePublisher","abstract":"<p>The state publisher that can be observed by counterparts</p>","parent_name":"StateProvider"},"Protocols/StateProvider.html":{"name":"StateProvider","abstract":"<p><code>StateProvider</code> defines a protocol for entities able to offer state publishers (Combine Publisher, RxSwift Observable,"},"Store%20%28contracts%29.html":{"name":"Store (contracts)"},"Store%20%28basic%20implementation%29.html":{"name":"Store (basic implementation)"},"Reducer.html":{"name":"Reducer"},"Middleware%20%28basics%29.html":{"name":"Middleware (basics)"},"Composition%20helpers.html":{"name":"Composition helpers"},"Closure%20type-aliases.html":{"name":"Closure type-aliases"},"Other%20Classes.html":{"name":"Other Classes","abstract":"<p>The following classes are available globally.</p>"},"Other%20Protocols.html":{"name":"Other Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Other%20Structs.html":{"name":"Other Structures","abstract":"<p>The following structures are available globally.</p>"},"Other%20Typealiases.html":{"name":"Other Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}