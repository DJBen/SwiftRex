{"Other Typealiases.html#/s:8SwiftRex24UnfailableSubscriberTypea":{"name":"UnfailableSubscriberType","abstract":"<p>Undocumented</p>"},"Other Typealiases.html#/s:8SwiftRex23UnfailablePublisherTypea":{"name":"UnfailablePublisherType","abstract":"<p>Undocumented</p>"},"Other Typealiases.html#/s:8SwiftRex17UnfailableSubjecta":{"name":"UnfailableSubject","abstract":"<p>Undocumented</p>"},"Other Typealiases.html#/s:8SwiftRex31UnfailableReplayLastSubjectTypea":{"name":"UnfailableReplayLastSubjectType","abstract":"<p>Undocumented</p>"},"Structs/MessageHandler.html#/s:8SwiftRex14MessageHandlerV06actionD0AA14SubscriberTypeVyAA14ActionProtocol_ps5NeverOGvp":{"name":"actionHandler","abstract":"<p>A way for Middlewares to trigger new actions.</p>","parent_name":"MessageHandler"},"Structs/MessageHandler.html#/s:8SwiftRex14MessageHandlerV05eventD0AA14SubscriberTypeVyAA13EventProtocol_ps5NeverOGvp":{"name":"eventHandler","abstract":"<p>A way for Middlewares to dispatch new events.</p>","parent_name":"MessageHandler"},"Structs/MessageHandler.html#/s:8SwiftRex14MessageHandlerV06actionD005eventD0AcA14SubscriberTypeVyAA14ActionProtocol_ps5NeverOG_AGyAA05EventJ0_pAJGtcfc":{"name":"init(actionHandler:eventHandler:)","abstract":"<p>Undocumented</p>","parent_name":"MessageHandler"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV9publisherAA09PublisherF0Vyxq_Gvp":{"name":"publisher","abstract":"<p>Undocumented</p>","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV10subscriberAA010SubscriberF0Vyxq_Gvp":{"name":"subscriber","abstract":"<p>Undocumented</p>","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV5valuexycvp":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV9publisher10subscriber5valueACyxq_GAA09PublisherF0Vyxq_G_AA010SubscriberF0Vyxq_Gxyctcfc":{"name":"init(publisher:subscriber:value:)","abstract":"<p>Undocumented</p>","parent_name":"ReplayLastSubjectType"},"Structs/ReplayLastSubjectType.html#/s:8SwiftRex21ReplayLastSubjectTypeV6mutateyqd__qd__xzXElF":{"name":"mutate(_:)","abstract":"<p>Undocumented</p>","parent_name":"ReplayLastSubjectType"},"Structs/SubjectType.html#/s:8SwiftRex11SubjectTypeV9publisherAA09PublisherD0Vyxq_Gvp":{"name":"publisher","abstract":"<p>Undocumented</p>","parent_name":"SubjectType"},"Structs/SubjectType.html#/s:8SwiftRex11SubjectTypeV10subscriberAA010SubscriberD0Vyxq_Gvp":{"name":"subscriber","abstract":"<p>Undocumented</p>","parent_name":"SubjectType"},"Structs/SubjectType.html#/s:8SwiftRex11SubjectTypeV9publisher10subscriberACyxq_GAA09PublisherD0Vyxq_G_AA010SubscriberD0Vyxq_Gtcfc":{"name":"init(publisher:subscriber:)","abstract":"<p>Undocumented</p>","parent_name":"SubjectType"},"Structs/PublisherType.html#/s:8SwiftRex13PublisherTypeV9subscribeyAA12Subscription_pAA010SubscriberD0Vyxq_Gcvp":{"name":"subscribe","abstract":"<p>Undocumented</p>","parent_name":"PublisherType"},"Structs/PublisherType.html#/s:8SwiftRex13PublisherTypeV9subscribeACyxq_GAA12Subscription_pAA010SubscriberD0Vyxq_Gc_tcfc":{"name":"init(subscribe:)","abstract":"<p>Undocumented</p>","parent_name":"PublisherType"},"Structs/PublisherType.html#/s:8SwiftRex13PublisherTypeV15assertNoFailureACyxs5NeverOGyF":{"name":"assertNoFailure()","abstract":"<p>Undocumented</p>","parent_name":"PublisherType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV7onValueyyxcvp":{"name":"onValue","abstract":"<p>Undocumented</p>","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV11onCompletedyyq_Sgcvp":{"name":"onCompleted","abstract":"<p>Undocumented</p>","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV7onValue0E9CompletedACyxq_GyxcSg_yq_SgcSgtcfc":{"name":"init(onValue:onCompleted:)","abstract":"<p>Undocumented</p>","parent_name":"SubscriberType"},"Structs/SubscriberType.html#/s:8SwiftRex14SubscriberTypeV15assertNoFailureACyxs5NeverOGyF":{"name":"assertNoFailure()","abstract":"<p>Undocumented</p>","parent_name":"SubscriberType"},"Structs/SubscriberType.html":{"name":"SubscriberType","abstract":"<p>Undocumented</p>"},"Structs/PublisherType.html":{"name":"PublisherType","abstract":"<p>Undocumented</p>"},"Structs/SubjectType.html":{"name":"SubjectType","abstract":"<p>Undocumented</p>"},"Structs/ReplayLastSubjectType.html":{"name":"ReplayLastSubjectType","abstract":"<p>Undocumented</p>"},"Structs/MessageHandler.html":{"name":"MessageHandler","abstract":"<p><code>MessageHandler</code> is a data structure that wraps an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex12EventHandlera\">EventHandler</a></code> and a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (basic implementation).html#/s:8SwiftRex13ActionHandlera\">ActionHandler</a></code>, offering a way to dispatch events (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code>) and trigger actions (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code>). This is usually the way how Middlewares will communicate both, actions and events, to Stores that will re-distribute them through its pipelines.</p>"},"Protocols/SubscriptionCollection.html#/s:8SwiftRex22SubscriptionCollectionP5store12subscriptionyAA0C0_p_tF":{"name":"store(subscription:)","abstract":"<p>Undocumented</p>","parent_name":"SubscriptionCollection"},"Protocols/Subscription.html#/s:8SwiftRex12SubscriptionP11unsubscribeyyF":{"name":"unsubscribe()","abstract":"<p>Undocumented</p>","parent_name":"Subscription"},"Protocols/Subscription.html#/s:8SwiftRex12SubscriptionPAAE9cancelled2byyqd__z_tAA0C10CollectionRd__lF":{"name":"cancelled(by:)","abstract":"<p>Undocumented</p>","parent_name":"Subscription"},"Protocols/Subscription.html#/s:8SwiftRex12SubscriptionPAAE9cancelled2byyAA0C10Collection_pz_tF":{"name":"cancelled(by:)","abstract":"<p>Undocumented</p>","parent_name":"Subscription"},"Protocols/Subscription.html":{"name":"Subscription","abstract":"<p>Undocumented</p>"},"Protocols/SubscriptionCollection.html":{"name":"SubscriptionCollection","abstract":"<p>Undocumented</p>"},"Classes/PipelineMiddleware.html#/s:8SwiftRex10MiddlewareP8handlersAA14MessageHandlerVSgvp":{"name":"handlers","parent_name":"PipelineMiddleware"},"Classes/PipelineMiddleware.html#/s:8SwiftRex18PipelineMiddlewareC16eventTransformer06actionF00E7Subject0gH022subscriptionCollectionACyxGAA13PublisherTypeVyAA14ActionProtocol_ps5NeverOGAKyx_AA05EventN0_ptANGcSg_AoKyx_AaL_ptANGcSgAA0hL0Vyx_AaP_ptANGyXEAVyx_AaL_ptANGyXEAA012SubscriptionJ0_pyXEtcfc":{"name":"init(eventTransformer:actionTransformer:eventSubject:actionSubject:subscriptionCollection:)","abstract":"<p>Undocumented</p>","parent_name":"PipelineMiddleware"},"Classes/PipelineMiddleware.html#/s:8SwiftRex10MiddlewareP6handle5event8getState4nextyAA13EventProtocol_p_0G4TypeQzycyAaH_p_AJyctctF":{"name":"handle(event:getState:next:)","parent_name":"PipelineMiddleware"},"Classes/PipelineMiddleware.html#/s:8SwiftRex10MiddlewareP6handle6action8getState4nextyAA14ActionProtocol_p_0G4TypeQzycyAaH_p_AJyctctF":{"name":"handle(action:getState:next:)","parent_name":"PipelineMiddleware"},"Classes/PipelineMiddleware.html":{"name":"PipelineMiddleware","abstract":"<p>Undocumented</p>"},"Closure type-aliases.html#/s:8SwiftRex8GetStatea":{"name":"GetState","abstract":"<p>Zero-argument function that returns the current state. <br/>"},"Closure type-aliases.html#/s:8SwiftRex17NextActionHandlera":{"name":"NextActionHandler","abstract":"<p>A function that calls the next action handler in the chain. <br/>"},"Closure type-aliases.html#/s:8SwiftRex16NextEventHandlera":{"name":"NextEventHandler","abstract":"<p>A function that calls the next event handler in the chain. <br/>"},"Closure type-aliases.html#/s:8SwiftRex14ReduceFunctiona":{"name":"ReduceFunction","abstract":"<p>State reducer: takes current state and an action, computes the new state. <br/>"},"Protocols/Monoid.html#/s:8SwiftRex6MonoidP5emptyxvpZ":{"name":"empty","abstract":"<p>Neutral monoidal container. Composing any monoid with an empty monoid should result in a function unchanged, regardless if the empty element is on the left-hand side or the right-hand side.</p>","parent_name":"Monoid"},"Protocols/Monoid.html#/s:8SwiftRex6MonoidP2lgoiyxx_xtFZ":{"name":"<>(_:_:)","abstract":"<p>Monoid Append operation</p>","parent_name":"Monoid"},"Protocols/Monoid.html":{"name":"Monoid","abstract":"<p>Protocol for a monoid container, allowing monoidal composition</p>"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareCyACyxGqd__c9StateTypeQyd__RszAA0D0Rd__lufc":{"name":"init(_:)","abstract":"<p>Default initializer for <code>AnyMiddleware</code></p>","parent_name":"AnyMiddleware"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareC6handle5event8getState4nextyAA13EventProtocol_p_xycyAaH_p_xyctctF":{"name":"handle(event:getState:next:)","abstract":"<p>Proxy method for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handle5event8getState4nextyAA13EventProtocol_p_0G4TypeQzycyAaH_p_AJyctctF\">Middleware.handle(event:getState:next:)</a></code></p>","parent_name":"AnyMiddleware"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareC6handle6action8getState4nextyAA14ActionProtocol_p_xycyAaH_p_xyctctF":{"name":"handle(action:getState:next:)","abstract":"<p>Proxy method for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handle6action8getState4nextyAA14ActionProtocol_p_0G4TypeQzycyAaH_p_AJyctctF\">Middleware.handle(action:getState:next:)</a></code></p>","parent_name":"AnyMiddleware"},"Classes/AnyMiddleware.html#/s:8SwiftRex13AnyMiddlewareC8handlersAA14MessageHandlerVSgvp":{"name":"handlers","abstract":"<p>Proxy property for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html#/s:8SwiftRex10MiddlewareP8handlersAA14MessageHandlerVSgvp\">Middleware.handlers</a></code></p>","parent_name":"AnyMiddleware"},"Classes/SubstateMiddleware.html#/s:8SwiftRex18SubstateMiddlewareC8handlersAA14MessageHandlerVSgvp":{"name":"handlers","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> is capable of triggering <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code>. This property is a nullable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (basic implementation).html#/s:8SwiftRex13ActionHandlera\">ActionHandler</a></code> used for the middleware to trigger the actions. It&rsquo;s gonna be injected by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code> or by a parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code>, so don&rsquo;t worry about it, just use it whenever you need to trigger something.</p>","parent_name":"SubstateMiddleware"},"Classes/SubstateMiddleware.html#/s:8SwiftRex18SubstateMiddlewareC6handle5event8getState4nextyAA13EventProtocol_p_xycyAaH_p_xyctctF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events and may trigger side-effects, may trigger actions, may start an asynchronous operation.</p>","parent_name":"SubstateMiddleware"},"Classes/SubstateMiddleware.html#/s:8SwiftRex18SubstateMiddlewareC6handle6action8getState4nextyAA14ActionProtocol_p_xycyAaH_p_xyctctF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions and may change them or trigger additional ones. Usually this is not the best place to start side-effects or trigger new actions, it should be more as an observation point for tracking, logging and telemetry.</p>","parent_name":"SubstateMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareCACyxGycfc":{"name":"init()","abstract":"<p>Default initializer for <code>ComposedMiddleware</code>, use this only if you don&rsquo;t like custom operators, otherwise create a <code>ComposedMiddleware</code> by composing two or more middlewares using the diamond operator, as shown below:</p>","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC8handlersAA14MessageHandlerVSgvp":{"name":"handlers","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> is capable of triggering <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code>. This property is a nullable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (basic implementation).html#/s:8SwiftRex13ActionHandlera\">ActionHandler</a></code> used for the middleware to trigger the actions. It&rsquo;s gonna be injected by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code> or by a parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code>, so don&rsquo;t worry about it, just use it whenever you need to trigger something.</p>","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC6append10middlewareyqd___t9StateTypeQyd__RszAA0D0Rd__lF":{"name":"append(middleware:)","abstract":"<p>Appends a new middleware to end of the composition (inner chain). Use this only if you don&rsquo;t like custom operators, otherwise create a <code>ComposedMiddleware</code> append more middlewares to the composition by using the diamond operator, as shown below:</p>","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC6handle5event8getState4nextyAA13EventProtocol_p_xycyAaH_p_xyctctF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events. The <code>ComposedMiddleware</code> will call <code>handle(event:getState:next:)</code> for all its internal middlewares, in the order as they were composed and when all of them are done, the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> will be forwarded to the next middleware in the chain.</p>","parent_name":"ComposedMiddleware"},"Classes/ComposedMiddleware.html#/s:8SwiftRex18ComposedMiddlewareC6handle6action8getState4nextyAA14ActionProtocol_p_xycyAaH_p_xyctctF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions. The <code>ComposedMiddleware</code> will call <code>handle(action:getState:next:)</code> for all its internal middlewares, in the order as they were composed and when all of them are done, the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> will be forwarded to the next middleware in the chain.</p>","parent_name":"ComposedMiddleware"},"Classes/DirectLineMiddleware.html#/s:8SwiftRex20DirectLineMiddlewareC8handlersAA14MessageHandlerVSgvp":{"name":"handlers","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> is capable of triggering <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code>. This property is a nullable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (basic implementation).html#/s:8SwiftRex13ActionHandlera\">ActionHandler</a></code> used for the middleware to trigger the actions. It&rsquo;s gonna be injected by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code> or by a parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code>, so don&rsquo;t worry about it, just use it whenever you need to trigger something.</p>","parent_name":"DirectLineMiddleware"},"Classes/DirectLineMiddleware.html#/s:8SwiftRex20DirectLineMiddlewareCACyxGycfc":{"name":"init()","abstract":"<p>Default initializer for <code>DirectLineMiddleware</code></p>","parent_name":"DirectLineMiddleware"},"Classes/DirectLineMiddleware.html#/s:8SwiftRex20DirectLineMiddlewareC6handle5event8getState4nextyAA13EventProtocol_p_xycyAaH_p_xyctctF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events. The <code>DirectLineMiddleware</code> is a useful tool when you have a very simple <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> that is also an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> and no decision has to be made other than forwarding the event as it is to the action queue.</p>","parent_name":"DirectLineMiddleware"},"Classes/DirectLineMiddleware.html#/s:8SwiftRex20DirectLineMiddlewareC6handle6action8getState4nextyAA14ActionProtocol_p_xycyAaH_p_xyctctF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions. The <code>DirectLineMiddleware</code> won&rsquo;t do anything with the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code>, simply forwards it to the next middleware in the chain.</p>","parent_name":"DirectLineMiddleware"},"Classes/BypassMiddleware.html#/s:8SwiftRex16BypassMiddlewareC8handlersAA14MessageHandlerVSgvp":{"name":"handlers","abstract":"<p>A <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> is capable of triggering <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code>. This property is a nullable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (basic implementation).html#/s:8SwiftRex13ActionHandlera\">ActionHandler</a></code> used for the middleware to trigger the actions. It&rsquo;s gonna be injected by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code> or by a parent <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code>, so don&rsquo;t worry about it, just use it whenever you need to trigger something.</p>","parent_name":"BypassMiddleware"},"Classes/BypassMiddleware.html#/s:8SwiftRex16BypassMiddlewareCACyxGycfc":{"name":"init()","abstract":"<p>Default initializer for <code>BypassMiddleware</code></p>","parent_name":"BypassMiddleware"},"Classes/BypassMiddleware.html#/s:8SwiftRex16BypassMiddlewareC6handle5event8getState4nextyAA13EventProtocol_p_xycyAaH_p_xyctctF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events. The <code>BypassMiddleware</code> won&rsquo;t do anything with the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code>, simply forwards it to the next middleware in the chain.</p>","parent_name":"BypassMiddleware"},"Classes/BypassMiddleware.html#/s:8SwiftRex16BypassMiddlewareC6handle6action8getState4nextyAA14ActionProtocol_p_xycyAaH_p_xyctctF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions. The <code>BypassMiddleware</code> won&rsquo;t do anything with the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code>, simply forwards it to the next middleware in the chain.</p>","parent_name":"BypassMiddleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP9StateTypeQa":{"name":"StateType","abstract":"<p>The State that this <code>Middleware</code> knowns how to handle. Thanks to lenses, this state can be a sub-state lifted to a global state. Please check <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4liftyAA08SubstateC0Cyqd__xGs15WritableKeyPathCyqd__9StateTypeQzGlF\">lift(_:)</a></code> for more details.</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP8handlersAA14MessageHandlerVSgvp":{"name":"handlers","abstract":"<p>A <code>Middleware</code> is capable of triggering <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code>. This property is a nullable <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (basic implementation).html#/s:8SwiftRex13ActionHandlera\">ActionHandler</a></code> used for the middleware to trigger the actions. It&rsquo;s gonna be injected by the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code> or by a parent <code>Middleware</code>, so don&rsquo;t worry about it, just use it whenever you need to trigger something.</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handle5event8getState4nextyAA13EventProtocol_p_0G4TypeQzycyAaH_p_AJyctctF":{"name":"handle(event:getState:next:)","abstract":"<p>Handles the incoming events and may trigger side-effects, may trigger actions, may start an asynchronous operation.</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewareP6handle6action8getState4nextyAA14ActionProtocol_p_0G4TypeQzycyAaH_p_AJyctctF":{"name":"handle(action:getState:next:)","abstract":"<p>Handles the incoming actions and may change them or trigger additional ones. Usually this is not the best place to start side-effects or trigger new actions, it should be more as an observation point for tracking, logging and telemetry.</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:8SwiftRex10MiddlewarePAAE4liftyAA08SubstateC0Cyqd__xGs15WritableKeyPathCyqd__9StateTypeQzGlF":{"name":"lift(_:)","abstract":"<p>A lenses method. The global state of your app is <em>Whole</em>, and the <code>Middleware</code> handles <em>Part</em>, that is a sub-state.","parent_name":"Middleware"},"Protocols/Middleware.html":{"name":"Middleware","abstract":"<p>⛓ <code>Middleware</code> is a plugin, or a composition of several plugins, that are assigned to the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code> pipeline in order to handle each <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> dispatched and to create <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> in response. It&rsquo;s also capable of handling each <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> before the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Reducer.html\">Reducer</a></code> to do its job.</p>"},"Classes/BypassMiddleware.html":{"name":"BypassMiddleware","abstract":"<p>The <code>BypassMiddleware</code> won&rsquo;t do any operation to either, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code>, it will simply forward them to the next middleware in the chain. It can be useful for Unit Tests or for some compositions.</p>"},"Classes/DirectLineMiddleware.html":{"name":"DirectLineMiddleware","abstract":"<p>The <code>DirectLineMiddleware</code> is a useful tool when you have a very simple <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> that is also an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> and no decision has to be made other than forwarding the event as it is to the action queue.</p>"},"Classes/ComposedMiddleware.html":{"name":"ComposedMiddleware","abstract":"<p>The <code>ComposedMiddleware</code> is a container of inner middlewares that are chained together in the order as they were composed. Whenever an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code> or an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code> arrives to be handled by this <code>ComposedMiddleware</code>, it will delegate to its internal chain of middlewares.</p>"},"Middleware (basics).html#/s:8SwiftRex2lgoiyAA18ComposedMiddlewareCy9StateTypeQzGx_q_tAA0E0RzAaHR_AEQy_AFRSr0_lF":{"name":"<>(_:_:)","abstract":"<p>Initializes a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ComposedMiddleware.html\">ComposedMiddleware</a></code> from the <code>lhs</code> and <code>rhs</code> middlewares parameters, or appends to the <code>lhs</code> if it is already a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ComposedMiddleware.html\">ComposedMiddleware</a></code>, as shown below:</p>"},"Classes/SubstateMiddleware.html":{"name":"SubstateMiddleware","abstract":"<p>This is a container that lifts a sub-state middleware to a global state middleware.</p>"},"Classes/AnyMiddleware.html":{"name":"AnyMiddleware","abstract":"<p>Type-erased <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code></p>"},"Structs/Reducer.html#/s:8SwiftRex7ReducerVyACyxGxx_AA14ActionProtocol_ptccfc":{"name":"init(_:)","abstract":"<p>Reducer initializer takes only the underlying function <code>(S, A) -&gt; S</code> that is the reducer function itself.</p>","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV5emptyACyxGvpZ":{"name":"empty","abstract":"<p>Neutral monoidal container. Composing any monoid with an empty monoid should result in a function unchanged, regardless if the empty element is on the left-hand side or the right-hand side.</p>","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV2lgoiyACyxGAE_AEtFZ":{"name":"<>(_:_:)","abstract":"<p>Monoid Append operation</p>","parent_name":"Reducer"},"Structs/Reducer.html#/s:8SwiftRex7ReducerV4liftyACyqd__Gs15WritableKeyPathCyqd__xGlF":{"name":"lift(_:)","abstract":"<p>A lenses method. The global state of your app is <em>Whole</em>, and the <code>Reducer</code> handles <em>Part</em>, that is a sub-state.","parent_name":"Reducer"},"Structs/Reducer.html":{"name":"Reducer","abstract":"<p>⚙ <code>Reducer</code> is a pure function wrapped in a monoid container, that takes current state and an action to calculate the new state.</p>"},"Reducer.html#/s:8SwiftRex14ActionProtocolP":{"name":"ActionProtocol","abstract":"<p>🏄‍ <code>ActionProtocol</code> represents an action, usually created by a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> in response to an event.</p>"},"Extensions/ActionHandler.html#/s:8SwiftRex14SubscriberTypeVA2A14ActionProtocol_pRszs5NeverORs_rlE7triggeryyAaD_pF":{"name":"trigger(_:)","abstract":"<p>A way for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Middleware.html\">Middleware</a></code> to trigger their actions, usually in response to events or async operations.</p>","parent_name":"ActionHandler"},"Classes/StoreBase.html#/s:8SwiftRex9StoreBaseC7subject7reducer10middlewareACyxGAA21ReplayLastSubjectTypeVyxs5NeverOG_AA7ReducerVyxGqd__tc05StateK0Qyd__RszAA10MiddlewareRd__lufc":{"name":"init(subject:reducer:middleware:)","abstract":"<p>Required initializer that takes all the expected pipelines</p>","parent_name":"StoreBase"},"Classes/StoreBase.html#/s:8SwiftRex9StoreBaseC14statePublisherAA0F4TypeVyxs5NeverOGvp":{"name":"statePublisher","abstract":"<p>Undocumented</p>","parent_name":"StoreBase"},"Classes/StoreBase.html#/s:8SwiftRex9StoreBaseC12eventHandlerAA14SubscriberTypeVyAA13EventProtocol_ps5NeverOGvp":{"name":"eventHandler","abstract":"<p>Undocumented</p>","parent_name":"StoreBase"},"Classes/StoreBase.html":{"name":"StoreBase","abstract":"<p>🏪 <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code> defines a protocol for the state store of an app. It must have an input and an output:</p>"},"Store (basic implementation).html#/s:8SwiftRex13ActionHandlera":{"name":"ActionHandler","abstract":"<p><code>ActionHandler</code> is a data structure that wraps a closuse which represents a way to trigger actions - defined by the type <code><a href=\"36f8f5912051ae747ef441d6511ca4cbReducer.html#/s:8SwiftRex14ActionProtocolP\">ActionProtocol</a></code>. The entity responsible for receiving and distributing these actions (usually the Store) will offer this closure to the entities that want to trigger new actions (usually the Middlewares).</p>"},"Extensions/ActionHandler.html":{"name":"ActionHandler"},"Protocols/StateProvider.html#/s:8SwiftRex13StateProviderP0C4TypeQa":{"name":"StateType","abstract":"<p>Undocumented</p>","parent_name":"StateProvider"},"Protocols/StateProvider.html#/s:8SwiftRex13StateProviderP14statePublisherAA0F4TypeVy0cG0Qzs5NeverOGvp":{"name":"statePublisher","abstract":"<p>Undocumented</p>","parent_name":"StateProvider"},"Extensions/EventHandler.html#/s:8SwiftRex14SubscriberTypeVA2A13EventProtocol_pRszs5NeverORs_rlE8dispatchyyAaD_pF":{"name":"dispatch(_:)","abstract":"<p>A way for a ViewController, Presenter, ViewModel or Middleware to dispatch new events.</p>","parent_name":"EventHandler"},"Protocols/Store.html#/s:8SwiftRex5StoreP12eventHandlerAA14SubscriberTypeVyAA13EventProtocol_ps5NeverOGvp":{"name":"eventHandler","abstract":"<p>Undocumented</p>","parent_name":"Store"},"Protocols/Store.html":{"name":"Store","abstract":"<p>🏪 <code>Store</code> defines a protocol for the state store of an app. It must have an input and an output:</p>"},"Store (contracts).html#/s:8SwiftRex13EventProtocolP":{"name":"EventProtocol","abstract":"<p>🕹 <code>EventProtocol</code> represents an event, usually created in response to an user&rsquo;s input, such as tap, swipe, pinch, scroll.</p>"},"Store (contracts).html#/s:8SwiftRex12EventHandlera":{"name":"EventHandler","abstract":"<p><code>EventHandler</code> is a data structure that wraps a closure which represents a way to dispatch events - defined by the type <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStore (contracts).html#/s:8SwiftRex13EventProtocolP\">EventProtocol</a></code>. The entity responsible for receiving and distributing these events (usually the Store) will offer this closure to the entities that want to dispatch new events (usually the ViewControllers/Presenter/ViewModels or even Middlewares).</p>"},"Extensions/EventHandler.html":{"name":"EventHandler"},"Protocols/StateProvider.html":{"name":"StateProvider","abstract":"<p><code>StateProvider</code> defines a protocol for an <code>ObservableType</code> of <code>StateType</code>, so everybody can observe the global state changes through this container. Usually a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Store.html\">Store</a></code>.</p>"},"Store (contracts).html":{"name":"Store (contracts)"},"Store (basic implementation).html":{"name":"Store (basic implementation)"},"Reducer.html":{"name":"Reducer"},"Middleware (basics).html":{"name":"Middleware (basics)"},"Composition helpers.html":{"name":"Composition helpers"},"Closure type-aliases.html":{"name":"Closure type-aliases"},"Other Classes.html":{"name":"Other Classes","abstract":"<p>The following classes are available globally.</p>"},"Other Protocols.html":{"name":"Other Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Other Structs.html":{"name":"Other Structures","abstract":"<p>The following structures are available globally.</p>"},"Other Typealiases.html":{"name":"Other Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}